import pygame, random, sqlite3, sys, os

pygame.init()

WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
ORANGE = (255, 165, 0)
YELLOW = (255, 255, 0)
GRAY = (100, 100, 100)

SCREEN_WIDTH = 500
SCREEN_HEIGHT = 500
GRID_SIZE = 20

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Змейка")

# ---------------- DATABASE ----------------

conn = sqlite3.connect("snake_game.db")
cur = conn.cursor()
cur.execute('''CREATE TABLE IF NOT EXISTS user (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE
)''')
cur.execute('''CREATE TABLE IF NOT EXISTS user_score (
    user_id INTEGER,
    score INTEGER,
    level INTEGER,
    FOREIGN KEY(user_id) REFERENCES user(id)
)''')
conn.commit()

def get_or_create_user(username):
    cur.execute("SELECT id FROM user WHERE username = ?", (username,))
    user = cur.fetchone()
    if user:
        user_id = user[0]
    else:
        cur.execute("INSERT INTO user (username) VALUES (?)", (username,))
        conn.commit()
        user_id = cur.lastrowid

    cur.execute("SELECT score, level FROM user_score WHERE user_id = ?", (user_id,))
    saved = cur.fetchone()
    if saved:
        return user_id, saved[0], saved[1]
    else:
        return user_id, 0, 1

def save_user_progress(user_id, score, level):
    cur.execute("INSERT OR REPLACE INTO user_score (user_id, score, level) VALUES (?, ?, ?)", (user_id, score, level))
    conn.commit()

# ------------- GAME CLASSES ----------------

class Snake:
    def __init__(self):
        self.body = [(100, 100), (80, 100), (60, 100)]
        self.direction = "RIGHT"
        self.growing = False

    def move(self):
        head_x, head_y = self.body[0]
        if self.direction == "UP":
            new_head = (head_x, head_y - GRID_SIZE)
        elif self.direction == "DOWN":
            new_head = (head_x, head_y + GRID_SIZE)
        elif self.direction == "LEFT":
            new_head = (head_x - GRID_SIZE, head_y)
        else:
            new_head = (head_x + GRID_SIZE, head_y)
        self.body.insert(0, new_head)
        if not self.growing:
            self.body.pop()
        else:
            self.growing = False

    def grow(self):
        self.growing = True

    def check_collision(self, walls):
        head = self.body[0]
        if head in self.body[1:] or head in walls:
            return True
        if head[0] < 0 or head[0] >= SCREEN_WIDTH or head[1] < 0 or head[1] >= SCREEN_HEIGHT:
            return True
        return False

    def draw(self, screen):
        for segment in self.body:
            pygame.draw.rect(screen, GREEN, (*segment, GRID_SIZE, GRID_SIZE))

class Food:
    def __init__(self, snake_body, walls):
        self.spawn_time = pygame.time.get_ticks()
        self.position = self.random_position(snake_body, walls)
        self.weight = random.choice([1, 2, 3])
        self.color = [RED, ORANGE, YELLOW][self.weight - 1]

    def random_position(self, snake_body, walls):
        while True:
            x = random.randint(0, (SCREEN_WIDTH // GRID_SIZE) - 1) * GRID_SIZE
            y = random.randint(0, (SCREEN_HEIGHT // GRID_SIZE) - 1) * GRID_SIZE
            pos = (x, y)
            if pos not in snake_body and pos not in walls:
                return pos

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (*self.position, GRID_SIZE, GRID_SIZE))

def get_walls(level):
    walls = set()
    if level >= 2:
        for x in range(0, SCREEN_WIDTH, GRID_SIZE):
            walls.add((x, 200))
    if level >= 3:
        for y in range(0, SCREEN_HEIGHT, GRID_SIZE):
            walls.add((250, y))
    return walls

def draw_walls(screen, walls):
    for wall in walls:
        pygame.draw.rect(screen, GRAY, (*wall, GRID_SIZE, GRID_SIZE))

# ------------- USER INPUT ----------------

def prompt_username():
    username = input("Enter your username: ")
    return username.strip().lower()

# ------------- MAIN GAME ----------------

def main():
    username = prompt_username()
    user_id, score, level = get_or_create_user(username)
    snake = Snake()
    walls = get_walls(level)
    food = Food(snake.body, walls)
    speed = 10 + (level - 1) * 2
    food_lifetime = 5000
    paused = False

    clock = pygame.time.Clock()
    running = True

    while running:
        screen.fill(WHITE)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP and snake.direction != "DOWN":
                    snake.direction = "UP"
                elif event.key == pygame.K_DOWN and snake.direction != "UP":
                    snake.direction = "DOWN"
                elif event.key == pygame.K_LEFT and snake.direction != "RIGHT":
                    snake.direction = "LEFT"
                elif event.key == pygame.K_RIGHT and snake.direction != "LEFT":
                    snake.direction = "RIGHT"
                elif event.key == pygame.K_SPACE:
                    paused = not paused
                elif event.key == pygame.K_s:
                    save_user_progress(user_id, score, level)
                    print("Progress saved.")

        if paused:
            pygame.time.wait(100)
            continue

        snake.move()

        if snake.check_collision(walls):
            print("Game over!")
            running = False

        if snake.body[0] == food.position:
            for _ in range(food.weight):
                snake.grow()
            score += food.weight
            if score % 5 == 0:
                level += 1
                walls = get_walls(level)
                speed = 10 + (level - 1) * 2
            food = Food(snake.body, walls)

        if pygame.time.get_ticks() - food.spawn_time > food_lifetime:
            food = Food(snake.body, walls)

        snake.draw(screen)
        food.draw(screen)
        draw_walls(screen, walls)

        font = pygame.font.SysFont("Verdana", 20)
        screen.blit(font.render(f"User: {username}", True, BLACK), (10, 10))
        screen.blit(font.render(f"Очки: {score}", True, BLACK), (10, 35))
        screen.blit(font.render(f"Уровень: {level}", True, BLACK), (10, 60))
        screen.blit(font.render("S = Save, SPACE = Pause", True, BLACK), (10, 450))

        pygame.display.flip()
        clock.tick(speed)

    pygame.quit()
    sys.exit()

main()
